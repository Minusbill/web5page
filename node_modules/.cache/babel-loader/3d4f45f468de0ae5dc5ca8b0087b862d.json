{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mx-auto mt-10 sm:mt-20\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Project header \"), _createVNode($setup[\"ProjectHeader\"], {\n    singleProjectHeader: $setup.singleProjectHeader\n  }), _createCommentVNode(\" Project gallery \"), _createCommentVNode(\"    <ProjectGallery :projectImages=\\\"projectImages\\\" />\"), _createCommentVNode(\" Project information \"), _createVNode($setup[\"ProjectInfo\"], {\n    projectInfo: $setup.projectInfo\n  }), _createCommentVNode(\" Project related projects \"), _createVNode($setup[\"ProjectRelatedProjects\"], {\n    relatedProject: $setup.relatedProject\n  })]);\n}","map":{"version":3,"mappings":";;EA+NOA,KAAK,EAAC;AAAkC;;uBAA7CC,oBAYM,OAZNC,UAYM,GAXJC,uCAAuB,EACvBC,aAA2DC;IAA3CC,mBAAmB,EAAED;EAAmB,IAExDF,wCAAwB,EACxBA,8EAA4D,EAE5DA,4CAA4B,EAC5BC,aAAyCC;IAA3BE,WAAW,EAAEF;EAAW,IAEtCF,iDAAiC,EACjCC,aAA0DC;IAAjCG,cAAc,EAAEH;EAAc","names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","$setup","singleProjectHeader","projectInfo","relatedProject"],"sourceRoot":"","sources":["/Users/bill/mygit/web5page/src/views/hot/MacosElectrum.vue"],"sourcesContent":["<script setup>\nimport {onMounted, onUpdated} from 'vue';\nimport feather from 'feather-icons';\nimport ProjectHeader from '../../components/projects/ProjectHeader.vue';\nimport ProjectInfo from '../../components/web5Component/Web5ProjectInfoLeft.vue';\nimport ProjectRelatedProjects from '../../components/projects/ProjectRelatedProjects.vue';\n\nconst singleProjectHeader = {\n  singleProjectTitle: 'MacOS安装 atommicals electrum X server 不完全指南',\n  singleProjectDate: 'Nov 19,  2023',\n  singleProjectTag: ' electrum / Atom ',\n};\n\nconst projectInfo = {\n  clientHeading: '   教程原文 ',\n  companyInfos: [\n    {id: 1, title: '原贴', details: 'https://twitter.com/wusimpl/',link:'https://twitter.com/wusimpl/status/1726134325287281036'},\n  ],\n  objectivesHeading: '',\n  objectivesDetails: '',\n  technologies: [\n    {\n      title: '',\n      techs: [],\n    },\n  ],\n  projectDetailsHeading: 'Challenge',\n  projectDetails: [\n    {\n      id: 3,\n      header: \"《MacOS安装 atommicals electrum X server 不完全指南》\",\n      details: '拒绝使用docker安装atom节点，速度立省100%',\n    },\n    {\n      id: 2,\n      header: \"前置条件：\",\n      details: '1. 确保你已经安装了比特币全节点，且建立了区块索引（txindex=1）\\n' +\n          '2. 确保你有足够的存储空间（>80GB），且最好使用SSD而非HDD，HDD会拖累索引速度。\\n' +\n          '3. 耐心。安装途中可能会出现会很多错误，不过很大坑我已经帮你们踩了。',\n    },\n    {\n      id: 1,\n      header: \"几个自问自答问题：\",\n      details: '几个自问自答问题：\\n' +\n          '1. 我已经使用docker索引了一部分区块了，这些索引好的部分可以用吗？\\n' +\n          '答案是可以，只需在.env中将db directory改为你已存在索引的文件夹就可以了。\\n' +\n          '\\n' +\n          '2. 为什么不使用linux系统安装（比如ubuntu）\\n' +\n          '对于我的情况来说很简单，我没有安装ubuntu系统，也不想弄云服务器。',\n    },\n    {\n      id: 4,\n      header: \"1️⃣ 安装 cmake 和 python3.8\\n\",\n      details: '这两个安装很简单，大家自己网上搜就好了。确保安装完成后可以在命令行使用且版本是对的。\\n' +\n          '\\n' +\n          'python3.8可以独立安装，也可以使用conda或者virtualenv等环境管理器\\n' +\n          '\\n' +\n          '请确保python命令和pip命令是一致的。',\n      img: require('@/assets/hot/make.png'),\n\n    },\n    {\n      id: 4,\n      header: \"2️⃣ 安装 leveldb 数据库\\n\",\n      details: '1. 下载 leveldb 1.21版本的源码\\n',\n      link:\"https://github.com/google/leveldb/archive/refs/tags/1.21.zip\"\n    },\n    {\n      id: 4,\n      details: '解压\\n' +\n          '打开命令行，然后cd 到leveldb-1.21这个目录'\n    }, {\n      id: 4,\n      details: '2. 按图修改CMakeLists.txt\\n' +\n          '加上一行命令\\n' +\n          'set(BUILD_SHARED_LIBS ON)',\n      img: require('@/assets/hot/CMakeLists.png'),\n    },\n    {\n      id: 5,\n      img: require('@/assets/hot/cmlistSet.png'),\n    },\n    {\n      id: 5,\n      header: \"2. 编译 leveldb\\n\",\n      details: '分别依次执行下面的两行命令\\n' +\n          'mkdir -p build && cd build\\n',\n    },\n    {\n      id: 5,\n      details:\n          'cmake -DCMAKE_BUILD_TYPE=Release .. && cmake --build .\\n' +\n          '请确保这两行命令执行是成功\\n',\n      img: require('@/assets/hot/leveldb.png'),\n    },\n    {\n      id: 6,\n      header: \" 3. 安装leveldb\",\n      details: '执行下面的命令（注意空格）\\n'\n    },\n    {\n      id: 6,\n      details:\n          ' sudo  cp  -r  ../include/leveldb/ /usr/local/include/leveldb\\n'\n    },\n    {\n      id: 6,\n      details:\n          'sudo cp ./libleveldb.dylib /usr/local/lib'\n    },\n    {\n      id: 6,\n      header: \"3️⃣ 下载atommical electrum X server 代码并配置\\n\",\n      link: \"https://github.com/atomicals/atomicals-electrumx\"\n    },\n    {\n      id: 6,\n      details: '下载解压后里面有个.env文件，要修改的是\\n'\n    },\n    {\n      id: 6,\n      details:\n          'DAEMON_URL：改成你的全节点rpc url，这里应该需要配置比特币全节点的rpcuser和rpcpass\\n'\n\n    },\n    {\n      id: 6,\n      details:\n          'DB_DIRECTORY：改成你要存放数据的目录，如果已经有了部分索引，那就改到那个索引所在目录',\n      img: require('@/assets/hot/DB_DIRECTORY.png'),\n    },\n    {\n      id: 6,\n      header: \"4️⃣ 安装 python 依赖\",\n      details: '请确保命令行在atomicals-electrumx目录，然后执行\\n'\n    },\n    {\n      id: 6,\n      details:    'pip install -r requirements.txt\\n'\n    },\n    {\n      id: 6,\n      details:\n          '然后保险起见，我们将plyvel替换成旧版本\\n'\n    },\n    {\n      id: 6,\n      details:\n          'pip install plyvel==1.3.0\\n' +\n          '\\n' +\n          '请确保所有包都安装成功！！！'\n    },\n    {\n      id: 6,\n      header: \" 5️⃣ 启动 server 请开始索引\\n\",\n      details: '确保命令行在atomicals-electrumx目录，执行\\n'\n    },\n    {\n      id: 6,\n      details:\n          'python electrumx_server\\n'\n    },\n    {\n      id: 6,\n      details:\n          '即开始索引，但有可能会报错，例如在某个目录找不到 libleveldb.dylib 这个文件，这时候就需要把 leveldb-1.21/build目录下我们编译好的libleveldb.dylib移动到这个目录。\\n'\n    },\n    {\n      id: 6,\n      details:\n          '然后再次执行上面的命令。',\n      img: require('@/assets/hot/libleveldb.png'),\n    },\n    {\n      id: 6,\n      details: '不出意外你的 server 将会开始进行索引。如果你遇到了问题，请在下方留言。',\n    },\n    {\n      id: 6,\n      img: require('@/assets/hot/serverserver.png'),\n    },\n  ],\n  socialSharingsHeading: '',\n  socialSharings: [],\n};\n\nconst relatedProject = {\n  relatedProjectsHeading: 'Related Projects',\n  relatedProjects: [\n    {\n      id: 1,\n      title: 'Mobile UI',\n      img: require('@/assets/images/starknet.jpg'),\n    },\n    {\n      id: 2,\n      title: 'Web Application',\n      img: require('@/assets/images/raas.jpg'),\n    },\n    {\n      id: 3,\n      title: 'UI Design',\n      img: require('@/assets/images/sui.jpg'),\n    },\n    {\n      id: 4,\n      title: 'Kabul Mobile App UI',\n      img: require('@/assets/images/mev.jpg'),\n    },\n  ],\n};\n\n\nonMounted(() => {\n  feather.replace();\n});\n\nonUpdated(() => {\n  feather.replace();\n});\n</script>\n\n<template>\n  <div class=\"container mx-auto mt-10 sm:mt-20\">\n    <!-- Project header -->\n    <ProjectHeader :singleProjectHeader=\"singleProjectHeader\"/>\n\n    <!-- Project gallery -->\n    <!--    <ProjectGallery :projectImages=\"projectImages\" />-->\n\n    <!-- Project information -->\n    <ProjectInfo :projectInfo=\"projectInfo\"/>\n\n    <!-- Project related projects -->\n    <ProjectRelatedProjects :relatedProject=\"relatedProject\"/>\n  </div>\n</template>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}